{
    "manifest": {
        "translationVersion": 1741327316588,
        "pluginVersion": "2.22.0"
    },
    "description": {
        "original": "Backup your vault with Git.",
        "translation": "Backup your vault with Git."
    },
    "dict": {
        "Notice(\"ObsidianGit: Base path does not exist\")": "Notice(\"ObsidianGit: Base path does not exist\")",
        "Notice(\n          \"Authentication failed. Please try with different credentials\"\n        )": "Notice(\n          \"Authentication failed. Please try with different credentials\"\n        )",
        "Notice(\n        \"This takes longer: Getting status\",\n        this.noticeLength\n      )": "Notice(\n        \"This takes longer: Getting status\",\n        this.noticeLength\n      )",
        "Notice(\"Initializing pull\")": "Notice(\"Initializing pull\")",
        "Notice(\"Finished pull\", false)": "Notice(\"Finished pull\", false)",
        "Notice(\"Initializing push\")": "Notice(\"Initializing push\")",
        "Notice(\"Initializing clone\")": "Notice(\"Initializing clone\")",
        "Notice(\"Initializing fetch\")": "Notice(\"Initializing fetch\")",
        "Notice(message, infinity = true)": "Notice(message, infinity = true)",
        "Notice(\n        message,\n        infinity ? this.noticeLength : void 0\n      )": "Notice(\n        message,\n        infinity ? this.noticeLength : void 0\n      )",
        "Notice(\n                `Automatic ${commitOrBackup} enabled! Every ${plugin.settings.autoSaveInterval} minutes.`\n              )": "Notice(\n                `Automatic ${commitOrBackup} enabled! Every ${plugin.settings.autoSaveInterval} minutes.`\n              )",
        "Notice(\n                `Automatic ${commitOrBackup} disabled!`\n              )": "Notice(\n                `Automatic ${commitOrBackup} disabled!`\n              )",
        "Notice(\"Please specify a valid number.\")": "Notice(\"Please specify a valid number.\")",
        "Notice(\n                  `Automatic push enabled! Every ${plugin.settings.autoPushInterval} minutes.`\n                )": "Notice(\n                  `Automatic push enabled! Every ${plugin.settings.autoPushInterval} minutes.`\n                )",
        "Notice(\n                  \"Automatic push disabled!\"\n                )": "Notice(\n                  \"Automatic push disabled!\"\n                )",
        "Notice(\n                \"Please specify a valid number.\"\n              )": "Notice(\n                \"Please specify a valid number.\"\n              )",
        "Notice(\n                `Automatic pull enabled! Every ${plugin.settings.autoPullInterval} minutes.`\n              )": "Notice(\n                `Automatic pull enabled! Every ${plugin.settings.autoPullInterval} minutes.`\n              )",
        "Notice(\"Automatic pull disabled!\")": "Notice(\"Automatic pull disabled!\")",
        "Notice(`${commitMessagePreview}`)": "Notice(`${commitMessagePreview}`)",
        "Notice(\n          \"Obsidian must be restarted for the changes to take affect\"\n        )": "Notice(\n          \"Obsidian must be restarted for the changes to take affect\"\n        )",
        "Notice(data.reason)": "Notice(data.reason)",
        "Notice(\"It seems like you are not using GitHub\")": "Notice(\"It seems like you are not using GitHub\")",
        "Notice(\n              \"Successfully deleted repository. Reloading plugin...\"\n            )": "Notice(\n              \"Successfully deleted repository. Reloading plugin...\"\n            )",
        "Notice(\"No repository found\")": "Notice(\"No repository found\")",
        "Notice(\n        \"Obsidian Git is now available on mobile! Please read the plugin's README for more information.\",\n        length\n      )": "Notice(\n        \"Obsidian Git is now available on mobile! Please read the plugin's README for more information.\",\n        length\n      )",
        "Notice(\n        \"Obsidian Git Mobile is now deprecated. Please uninstall it and install Obsidian Git instead.\",\n        length\n      )": "Notice(\n        \"Obsidian Git Mobile is now deprecated. Please uninstall it and install Obsidian Git instead.\",\n        length\n      )",
        "Notice(\n            \"Can't find a valid git repository. Please create one via the given command or clone an existing repo.\",\n            1e4\n          )": "Notice(\n            \"Can't find a valid git repository. Please create one via the given command or clone an existing repo.\",\n            1e4\n          )",
        "Notice(\"Initialized new repo\")": "Notice(\"Initialized new repo\")",
        "Notice(\"Aborted clone\")": "Notice(\"Aborted clone\")",
        "Notice(\"Invalid depth. Aborting clone.\")": "Notice(\"Invalid depth. Aborting clone.\")",
        "Notice(`Cloning new repo into \"${dir}\"`)": "Notice(`Cloning new repo into \"${dir}\"`)",
        "Notice(\"Cloned new repo.\")": "Notice(\"Cloned new repo.\")",
        "Notice(\"Please restart Obsidian\")": "Notice(\"Please restart Obsidian\")",
        "Notice(\n            \"Auto backup: Please enter a custom commit message. Leave empty to abort\"\n          )": "Notice(\n            \"Auto backup: Please enter a custom commit message. Leave empty to abort\"\n          )",
        "Notice(\"No upstream branch is set. Please select one.\")": "Notice(\"No upstream branch is set. Please select one.\")",
        "Notice(\n      \"All local changes have been discarded. New files remain untouched.\"\n    )": "Notice(\n      \"All local changes have been discarded. New files remain untouched.\"\n    )",
        "Notice(message, 5 * 1e3)": "Notice(message, 5 * 1e3)",
        "Notice(\"Aborted\")": "Notice(\"Aborted\")",
        "Notice(message, timeout)": "Notice(message, timeout)",
        ".log(value)": ".log(value)",
        ".log('Unhandled error in \"FileSystem.exists()": ".log('Unhandled error in \"FileSystem.exists()",
        ".log(\n                `Did not delete ${fullpath} because directory is not empty`\n              )": ".log(\n                `Did not delete ${fullpath} because directory is not empty`\n              )",
        ".log(e)": ".log(e)",
        ".log(\"error\", err)": ".log(\"error\", err)",
        "_log({\n  fs,\n  cache,\n  gitdir,\n  filepath,\n  ref,\n  depth,\n  since,\n  force,\n  follow\n})": "_log({\n  fs,\n  cache,\n  gitdir,\n  filepath,\n  ref,\n  depth,\n  since,\n  force,\n  follow\n})",
        " log({\n  fs,\n  dir,\n  gitdir = join(dir, \".git\")": " log({\n  fs,\n  dir,\n  gitdir = join(dir, \".git\")",
        "_log({\n      fs: new FileSystem(fs)": "_log({\n      fs: new FileSystem(fs)",
        " log(...rest)": " log(...rest)",
        ".log(string, string)": ".log(string, string)",
        ".log({ from: string, to: string })": ".log({ from: string, to: string })",
        "_log();\n    init_merge()": "_log();\n    init_merge()",
        "_log();\n  }\n})": "_log();\n  }\n})",
        " log(file, relativeToVault = true, limit)": " log(file, relativeToVault = true, limit)",
        ".log(\n      {\n        file: path2,\n        maxCount: limit,\n        \"-m\": null,\n        \"--name-status\": null\n      },\n      (err)": ".log(\n      {\n        file: path2,\n        maxCount: limit,\n        \"-m\": null,\n        \"--name-status\": null\n      },\n      (err)",
        ".log(remote)": ".log(remote)",
        ".log(res)": ".log(res)",
        ".log({ n: 1 }, (err)": ".log({ n: 1 }, (err)",
        " log(_, __ = true, limit)": " log(_, __ = true, limit)",
        ".log({ ...this.getRepo()": ".log({ ...this.getRepo()",
        ".log(\"Something weird happened:\")": ".log(\"Something weird happened:\")",
        ".log(A)": ".log(A)",
        ".log(B)": ".log(B)",
        ".log(this.plg.manifest.name + \": Enabled line authoring.\")": ".log(this.plg.manifest.name + \": Enabled line authoring.\")",
        ".log(this.plg.manifest.name + \": Disabled line authoring.\")": ".log(this.plg.manifest.name + \": Disabled line authoring.\")",
        ".log(void 0, false, isSimpleGit ? 50 : 10)": ".log(void 0, false, isSimpleGit ? 50 : 10)",
        ".log(event)": ".log(event)",
        ".log(\"loading \" + this.manifest.name + \" plugin\")": ".log(\"loading \" + this.manifest.name + \" plugin\")",
        ".log(\"unloading \" + this.manifest.name + \" plugin\")": ".log(\"unloading \" + this.manifest.name + \" plugin\")",
        ".log(\n            \"Something weird happened. The 'checkRequirements' result is \" + result\n          )": ".log(\n            \"Something weird happened. The 'checkRequirements' result is \" + result\n          )",
        ".log(\"Pushing....\")": ".log(\"Pushing....\")",
        ".log(\"Pushed!\", pushedFiles)": ".log(\"Pushed!\", pushedFiles)",
        ".log(`git obsidian message: ${message}`)": ".log(`git obsidian message: ${message}`)",
        ".log(`git obsidian error: ${message}`)": ".log(`git obsidian error: ${message}`)",
        ".error(\n        \"This browser lacks typed array (Uint8Array)": ".error(\n        \"This browser lacks typed array (Uint8Array)",
        "_error();\n    GitResponseError = class extends GitError {\n      constructor(git, message)": "_error();\n    GitResponseError = class extends GitError {\n      constructor(git, message)",
        "_error();\n    TaskConfigurationError = class extends GitError {\n      constructor(message)": "_error();\n    TaskConfigurationError = class extends GitError {\n      constructor(message)",
        "_error();\n    EMPTY_COMMANDS = [];\n  }\n})": "_error();\n    EMPTY_COMMANDS = [];\n  }\n})",
        "_error();\n    init_git_logger()": "_error();\n    init_git_logger()",
        "_error();\n    init_task()": "_error();\n    init_task()",
        "_error();\n    init_utils()": "_error();\n    init_utils()",
        "_error();\n    init_parse_merge()": "_error();\n    init_parse_merge()",
        "_error();\n    init_parse_branch_delete()": "_error();\n    init_parse_branch_delete()",
        "_error();\n    init_parse_pull()": "_error();\n    init_parse_pull()",
        "_error();\nvar GitConstructError = class extends GitError {\n  constructor(config, message)": "_error();\nvar GitConstructError = class extends GitError {\n  constructor(config, message)",
        "_error();\ninit_git_error()": "_error();\ninit_git_error()",
        "_error();\ninit_task_configuration_error()": "_error();\ninit_task_configuration_error()",
        "_error();\nfunction isTaskError(result)": "_error();\nfunction isTaskError(result)",
        "_error();\nvar esm_default = gitInstanceFactory;\n\n// src/constants.ts\ninit_polyfill_buffer()": "_error();\nvar esm_default = gitInstanceFactory;\n\n// src/constants.ts\ninit_polyfill_buffer()",
        ".error(e)": ".error(e)",
        ".error(e2)": ".error(e2)",
        ".error(command.error)": ".error(command.error)",
        ".error(\"Failed to parse lines, starting in 0!\")": ".error(\"Failed to parse lines, starting in 0!\")",
        ".error(\"Unknown state reached while processing groups of lines\", contextLines, oldLines, newLines)": ".error(\"Unknown state reached while processing groups of lines\", contextLines, oldLines, newLines)",
        ".error(error)": ".error(error)",
        "name : \" (anonymous)\"": "name : \" (anonymous)\"",
        "name:\"' + esc(codeObj.partials[key2].name) + '\"": "name:\"' + esc(codeObj.partials[key2].name) + '\"",
        "name: \"isomorphic-git\"": "name: \"isomorphic-git\"",
        "name: \"\",\n      email: \"": "name: \"\",\n      email: \"",
        "name: \"Source Control\"": "name: \"Source Control\"",
        "name: \"History\"": "name: \"History\"",
        "name: \"Diff View\"": "name: \"Diff View\"",
        "name: \"\",\n    epochSeconds: momentToEpochSeconds(slightlyOlderAgeForInitialRender),\n    tz: \"": "name: \"\",\n    epochSeconds: momentToEpochSeconds(slightlyOlderAgeForInitialRender),\n    tz: \"",
        "name: \"fileIcon\"": "name: \"fileIcon\"",
        "name: \"fileTag\"": "name: \"fileTag\"",
        "name: \"Edit .gitignore\"": "name: \"Edit .gitignore\"",
        "name: \"Open source control view\"": "name: \"Open source control view\"",
        "name: \"Open history view\"": "name: \"Open history view\"",
        "name: \"Open diff view\"": "name: \"Open diff view\"",
        "name: \"Open file on GitHub\"": "name: \"Open file on GitHub\"",
        "name: \"Open file history on GitHub\"": "name: \"Open file history on GitHub\"",
        "name: \"Pull\"": "name: \"Pull\"",
        "name: \"fetch\"": "name: \"fetch\"",
        "name: \"Switch to remote branch\"": "name: \"Switch to remote branch\"",
        "name: \"Add file to gitignore\"": "name: \"Add file to gitignore\"",
        "name: \"Create backup\"": "name: \"Create backup\"",
        "name: \"Create backup and close\"": "name: \"Create backup and close\"",
        "name: \"Create backup with specific message\"": "name: \"Create backup with specific message\"",
        "name: \"Commit all changes\"": "name: \"Commit all changes\"",
        "name: \"Commit all changes with specific message\"": "name: \"Commit all changes with specific message\"",
        "name: \"Commit staged\"": "name: \"Commit staged\"",
        "name: \"Commit staged with specific message\"": "name: \"Commit staged with specific message\"",
        "name: \"Push\"": "name: \"Push\"",
        "name: \"Stage current file\"": "name: \"Stage current file\"",
        "name: \"Unstage current file\"": "name: \"Unstage current file\"",
        "name: \"Edit remotes\"": "name: \"Edit remotes\"",
        "name: \"Remove remote\"": "name: \"Remove remote\"",
        "name: \"CAUTION: Delete repository\"": "name: \"CAUTION: Delete repository\"",
        "name: \"Initialize a new repo\"": "name: \"Initialize a new repo\"",
        "name: \"Clone an existing remote repo\"": "name: \"Clone an existing remote repo\"",
        "name: \"List changed files\"": "name: \"List changed files\"",
        "name: \"Switch branch\"": "name: \"Switch branch\"",
        "name: \"Create new branch\"": "name: \"Create new branch\"",
        "name: \"Delete branch\"": "name: \"Delete branch\"",
        "name: \"CAUTION: Discard all changes\"": "name: \"CAUTION: Discard all changes\"",
        "name: \"Toggle line author information\"": "name: \"Toggle line author information\"",
        "description: `${noun} '${abbreviateRef(fullref)}' of ${url}`": "description: `${noun} '${abbreviateRef(fullref)}' of ${url}`",
        "text: \"Git Backup settings\"": "text: \"Git Backup settings\"",
        "text: \"Git is not ready. When all settings are correct you can configure auto backup, etc.\"": "text: \"Git is not ready. When all settings are correct you can configure auto backup, etc.\"",
        "text: \"Automatic\"": "text: \"Automatic\"",
        "text: \"Commit message\"": "text: \"Commit message\"",
        "text: \"Backup\"": "text: \"Backup\"",
        "text: \"Line author information\"": "text: \"Line author information\"",
        "text: \"Miscellaneous\"": "text: \"Miscellaneous\"",
        "text: \"Authentication/Commit Author\"": "text: \"Authentication/Commit Author\"",
        "text: \"Commit Author\"": "text: \"Commit Author\"",
        "text: \"Advanced\"": "text: \"Advanced\"",
        "text: \"CMD (\\u2318) + OPTION (\\u2325) + I\"": "text: \"CMD (\\u2318) + OPTION (\\u2325) + I\"",
        "text: \"CTRL + SHIFT + I\"": "text: \"CTRL + SHIFT + I\"",
        "text: \"Save\"": "text: \"Save\"",
        "text: \"Cancel\"": "text: \"Cancel\"",
        ".setText(\n      \"Debugging and logging:\\nYou can always see the logs of this and every other plugin by opening the console with\"\n    )": ".setText(\n      \"Debugging and logging:\\nYou can always see the logs of this and every other plugin by opening the console with\"\n    )",
        ".setText(\"Edit .gitignore\")": ".setText(\"Edit .gitignore\")",
        ".setText(`${this.deletion ? \"Delete\" : \"Discard\"} this file?`)": ".setText(`${this.deletion ? \"Delete\" : \"Discard\"} this file?`)",
        ".setText(\n      `Do you really want to ${this.deletion ? \"delete\" : \"discard the changes of\"} \"${this.filename}\"`\n    )": ".setText(\n      `Do you really want to ${this.deletion ? \"delete\" : \"discard the changes of\"} \"${this.filename}\"`\n    )",
        ".setButtonText(\"Preview\")": ".setButtonText(\"Preview\")",
        ".setButtonText(\"Reload\")": ".setButtonText(\"Reload\")",
        ".setName(\"Split automatic commit and push\")": ".setName(\"Split automatic commit and push\")",
        ".setName(`Vault ${commitOrBackup} interval (minutes)`)": ".setName(`Vault ${commitOrBackup} interval (minutes)`)",
        ".setName(`Auto Backup after stop editing any file`)": ".setName(`Auto Backup after stop editing any file`)",
        ".setName(`Auto ${commitOrBackup} after latest commit`)": ".setName(`Auto ${commitOrBackup} after latest commit`)",
        ".setName(`Vault push interval (minutes)`)": ".setName(`Vault push interval (minutes)`)",
        ".setName(\"Auto pull interval (minutes)\")": ".setName(\"Auto pull interval (minutes)\")",
        ".setName(\"Specify custom commit message on auto backup\")": ".setName(\"Specify custom commit message on auto backup\")",
        ".setName(\"Commit message on auto backup/commit\")": ".setName(\"Commit message on auto backup/commit\")",
        ".setName(\"Commit message on manual backup/commit\")": ".setName(\"Commit message on manual backup/commit\")",
        ".setName(\"{{date}} placeholder format\")": ".setName(\"{{date}} placeholder format\")",
        ".setName(\"{{hostname}} placeholder replacement\")": ".setName(\"{{hostname}} placeholder replacement\")",
        ".setName(\"Preview commit message\")": ".setName(\"Preview commit message\")",
        ".setName(\"List filenames affected by commit in the commit body\")": ".setName(\"List filenames affected by commit in the commit body\")",
        ".setName(\"Sync Method\")": ".setName(\"Sync Method\")",
        ".setName(\"Pull updates on startup\")": ".setName(\"Pull updates on startup\")",
        ".setName(\"Push on backup\")": ".setName(\"Push on backup\")",
        ".setName(\"Pull changes before push\")": ".setName(\"Pull changes before push\")",
        ".setName(\n      \"Automatically refresh Source Control View on file changes\"\n    )": ".setName(\n      \"Automatically refresh Source Control View on file changes\"\n    )",
        ".setName(\"Source Control View refresh interval\")": ".setName(\"Source Control View refresh interval\")",
        ".setName(\"Disable notifications\")": ".setName(\"Disable notifications\")",
        ".setName(\"Show status bar\")": ".setName(\"Show status bar\")",
        ".setName(\"Show stage/unstage button in file menu\")": ".setName(\"Show stage/unstage button in file menu\")",
        ".setName(\"Show branch status bar\")": ".setName(\"Show branch status bar\")",
        ".setName(\"Show changes files count in status bar\")": ".setName(\"Show changes files count in status bar\")",
        ".setName(\n        \"Username on your git server. E.g. your username on GitHub\"\n      )": ".setName(\n        \"Username on your git server. E.g. your username on GitHub\"\n      )",
        ".setName(\"Password/Personal access token\")": ".setName(\"Password/Personal access token\")",
        ".setName(\"Author name for commit\")": ".setName(\"Author name for commit\")",
        ".setName(\"Author email for commit\")": ".setName(\"Author email for commit\")",
        ".setName(\"Update submodules\")": ".setName(\"Update submodules\")",
        ".setName(\"Submodule recurse checkout/switch\")": ".setName(\"Submodule recurse checkout/switch\")",
        ".setName(\"Custom Git binary path\")": ".setName(\"Custom Git binary path\")",
        ".setName(\"Additional environment variables\")": ".setName(\"Additional environment variables\")",
        ".setName(\"Additional PATH environment variable paths\")": ".setName(\"Additional PATH environment variable paths\")",
        ".setName(\"Reload with new environment variables\")": ".setName(\"Reload with new environment variables\")",
        ".setName(\"Custom base path (Git repository path)\")": ".setName(\"Custom base path (Git repository path)\")",
        ".setName(\"Custom Git directory path (Instead of '.git')\")": ".setName(\"Custom Git directory path (Instead of '.git')\")",
        ".setName(\"Disable on this device\")": ".setName(\"Disable on this device\")",
        ".setName(\"Donate\")": ".setName(\"Donate\")",
        ".setName(\n      \"Show commit authoring information next to each line\"\n    )": ".setName(\n      \"Show commit authoring information next to each line\"\n    )",
        ".setName(\"Follow movement and copies across files and commits\")": ".setName(\"Follow movement and copies across files and commits\")",
        ".setName(\"Show commit hash\")": ".setName(\"Show commit hash\")",
        ".setName(\"Author name display\")": ".setName(\"Author name display\")",
        ".setName(\"Authoring date display\")": ".setName(\"Authoring date display\")",
        ".setName(\"Custom authoring date format\")": ".setName(\"Custom authoring date format\")",
        ".setName(\"Authoring date display timezone\")": ".setName(\"Authoring date display timezone\")",
        ".setName(\n        \"Oldest age in coloring\"\n      )": ".setName(\n        \"Oldest age in coloring\"\n      )",
        ".setName(\"Text color\")": ".setName(\"Text color\")",
        ".setName(\"Ignore whitespace and newlines in changes\")": ".setName(\"Ignore whitespace and newlines in changes\")",
        ".setDesc(\"Enable to use separate timer for commit and push\")": ".setDesc(\"Enable to use separate timer for commit and push\")",
        ".setDesc(\n        `${plugin.settings.differentIntervalCommitAndPush ? \"Commit\" : \"Commit and push\"} changes every X minutes. Set to 0 (default) to disable. (See below setting for further configuration!)`\n      )": ".setDesc(\n        `${plugin.settings.differentIntervalCommitAndPush ? \"Commit\" : \"Commit and push\"} changes every X minutes. Set to 0 (default) to disable. (See below setting for further configuration!)`\n      )",
        ".setDesc(\n          `If turned on, set last auto ${commitOrBackup} time to latest commit`\n        )": ".setDesc(\n          `If turned on, set last auto ${commitOrBackup} time to latest commit`\n        )",
        ".setDesc(\n          \"Push changes every X minutes. Set to 0 (default) to disable.\"\n        )": ".setDesc(\n          \"Push changes every X minutes. Set to 0 (default) to disable.\"\n        )",
        ".setDesc(\n        \"Pull changes every X minutes. Set to 0 (default) to disable.\"\n      )": ".setDesc(\n        \"Pull changes every X minutes. Set to 0 (default) to disable.\"\n      )",
        ".setDesc(\"You will get a pop up to specify your message\")": ".setDesc(\"You will get a pop up to specify your message\")",
        ".setDesc(\n        \"Available placeholders: {{date}} (see below), {{hostname}} (see below), {{numFiles}} (number of changed files in the commit) and {{files}} (changed files in commit message)\"\n      )": ".setDesc(\n        \"Available placeholders: {{date}} (see below), {{hostname}} (see below), {{numFiles}} (number of changed files in the commit) and {{files}} (changed files in commit message)\"\n      )",
        ".setDesc(\n        `Specify custom date format. E.g. \"${DATE_TIME_FORMAT_SECONDS}\"`\n      )": ".setDesc(\n        `Specify custom date format. E.g. \"${DATE_TIME_FORMAT_SECONDS}\"`\n      )",
        ".setDesc(\"Specify custom hostname for every device.\")": ".setDesc(\"Specify custom hostname for every device.\")",
        ".setDesc(\n          \"Selects the method used for handling new changes found in your remote git repository.\"\n        )": ".setDesc(\n          \"Selects the method used for handling new changes found in your remote git repository.\"\n        )",
        ".setDesc(\"Automatically pull updates when Obsidian starts\")": ".setDesc(\"Automatically pull updates when Obsidian starts\")",
        ".setDesc(\"Disable to only commit changes\")": ".setDesc(\"Disable to only commit changes\")",
        ".setDesc(\"Commit -> pull -> push (Only if pushing is enabled)\")": ".setDesc(\"Commit -> pull -> push (Only if pushing is enabled)\")",
        ".setDesc(\n      \"On slower machines this may cause lags. If so, just disable this option\"\n    )": ".setDesc(\n      \"On slower machines this may cause lags. If so, just disable this option\"\n    )",
        ".setDesc(\n      \"Milliseconds to wait after file change before refreshing the Source Control View\"\n    )": ".setDesc(\n      \"Milliseconds to wait after file change before refreshing the Source Control View\"\n    )",
        ".setDesc(\n      \"Disable notifications for git operations to minimize distraction (refer to status bar for updates). Errors are still shown as notifications even if you enable this setting\"\n    )": ".setDesc(\n      \"Disable notifications for git operations to minimize distraction (refer to status bar for updates). Errors are still shown as notifications even if you enable this setting\"\n    )",
        ".setDesc(\n      \"Obsidian must be restarted for the changes to take affect\"\n    )": ".setDesc(\n      \"Obsidian must be restarted for the changes to take affect\"\n    )",
        ".setDesc(\n        \"Type in your password. You won't be able to see it again.\"\n      )": ".setDesc(\n        \"Type in your password. You won't be able to see it again.\"\n      )",
        ".setDesc(\n        '\"Create backup\" and \"pull\" takes care of submodules. Missing features: Conflicted files, count of pulled/pushed/committed files. Tracking branch needs to be set for each submodule'\n      )": ".setDesc(\n        '\"Create backup\" and \"pull\" takes care of submodules. Missing features: Conflicted files, count of pulled/pushed/committed files. Tracking branch needs to be set for each submodule'\n      )",
        ".setDesc(\n          \"Whenever a checkout happens on the root repository, recurse the checkout on the submodules (if the branches exist).\"\n        )": ".setDesc(\n          \"Whenever a checkout happens on the root repository, recurse the checkout on the submodules (if the branches exist).\"\n        )",
        ".setDesc(\n        \"Use each line for a new environment variable in the format KEY=VALUE\"\n      )": ".setDesc(\n        \"Use each line for a new environment variable in the format KEY=VALUE\"\n      )",
        ".setDesc(\"Use each line for one path\")": ".setDesc(\"Use each line for one path\")",
        ".setDesc(\n        \"Removing previously added environment variables will not take effect until Obsidian is restarted.\"\n      )": ".setDesc(\n        \"Removing previously added environment variables will not take effect until Obsidian is restarted.\"\n      )",
        ".setDesc(\n      `Requires restart of Obsidian to take effect. Use \"\\\\\" instead of \"/\" on Windows.`\n    )": ".setDesc(\n      `Requires restart of Obsidian to take effect. Use \"\\\\\" instead of \"/\" on Windows.`\n    )",
        ".setDesc(\n      \"If you like this Plugin, consider donating to support continued development.\"\n    )": ".setDesc(\n      \"If you like this Plugin, consider donating to support continued development.\"\n    )",
        ".setDesc(\"Only available on desktop currently.\")": ".setDesc(\"Only available on desktop currently.\")",
        ".setDesc(\"If and how the author is displayed\")": ".setDesc(\"If and how the author is displayed\")",
        ".setDesc(\n        \"If and how the date and time of authoring the line is displayed\"\n      )": ".setDesc(\n        \"If and how the date and time of authoring the line is displayed\"\n      )",
        ".setPlaceholder(\"vault backup: {{date}}\")": ".setPlaceholder(\"vault backup: {{date}}\")",
        ".setPlaceholder(\"7000\")": ".setPlaceholder(\"7000\")",
        ".setPlaceholder(\"git\")": ".setPlaceholder(\"git\")",
        ".setPlaceholder(\"GIT_DIR=/path/to/git/dir\")": ".setPlaceholder(\"GIT_DIR=/path/to/git/dir\")",
        ".setPlaceholder(\"directory/directory-with-git-repo\")": ".setPlaceholder(\"directory/directory-with-git-repo\")",
        ".setPlaceholder(\".git\")": ".setPlaceholder(\".git\")",
        ".setPlaceholder(\"YYYY-MM-DD HH:mm\")": ".setPlaceholder(\"YYYY-MM-DD HH:mm\")",
        ".setPlaceholder(\"1y\")": ".setPlaceholder(\"1y\")",
        ".setPlaceholder(\n      \"Not supported files will be opened by default app!\"\n    )": ".setPlaceholder(\n      \"Not supported files will be opened by default app!\"\n    )",
        ".setPlaceholder(\n      \"Type your message and select optional the version with the added date.\"\n    )": ".setPlaceholder(\n      \"Type your message and select optional the version with the added date.\"\n    )",
        ".setPlaceholder(\"Select branch to checkout\")": ".setPlaceholder(\"Select branch to checkout\")",
        ".setTitle(\"Copy commit hash\")": ".setTitle(\"Copy commit hash\")",
        ".setTitle(`Git: Stage`)": ".setTitle(`Git: Stage`)",
        ".setTitle(`Git: Unstage`)": ".setTitle(`Git: Unstage`)",
        ".innerText = `Color for ${whichDescriber} commits`": ".innerText = `Color for ${whichDescriber} commits`"
    }
}
