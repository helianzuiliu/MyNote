{
    "manifest": {
        "translationVersion": 1749556372864,
        "pluginVersion": "2.14.7"
    },
    "description": {
        "original": "Add icons to anything you desire in Obsidian, including files, folders, and text.",
        "translation": "Add icons to anything you desire in Obsidian, including files, folders, and text."
    },
    "dict": {
        "Notice(`[${config.PLUGIN_NAME}] Due to a change in version v1.2.2, the icon pack folder changed. Please change it in the settings to not be directly in /plugins.`, 8000)": "Notice(`[${config.PLUGIN_NAME}] Due to a change in version v1.2.2, the icon pack folder changed. Please change it in the settings to not be directly in /plugins.`, 8000)",
        "Notice(`Directory with name ${iconPack.name} already exists.`)": "Notice(`Directory with name ${iconPack.name} already exists.`)",
        "Notice(`Moving ${iconPack.name}...`)": "Notice(`Moving ${iconPack.name}...`)",
        "Notice(`...moved ${iconPack.name}`)": "Notice(`...moved ${iconPack.name}`)",
        "Notice(`[${config.PLUGIN_NAME}] Renamed ${normalizedFilename} to ${newFilename} to avoid duplication.`, 8000)": "Notice(`[${config.PLUGIN_NAME}] Renamed ${normalizedFilename} to ${newFilename} to avoid duplication.`, 8000)",
        "Notice(`[${config.PLUGIN_NAME}] Could not create duplicated icon name (${normalizedFilename})": "Notice(`[${config.PLUGIN_NAME}] Could not create duplicated icon name (${normalizedFilename})",
        "Notice(`Seems like you do not have an icon pack installed. (${iconName})": "Notice(`Seems like you do not have an icon pack installed. (${iconName})",
        "Notice('Please delete your old icon packs and redownload your icon packs to use the new syncing mechanism.', 20000)": "Notice('Please delete your old icon packs and redownload your icon packs to use the new syncing mechanism.', 20000)",
        "Notice(`[${config.PLUGIN_NAME}] Inheritance has been removed and replaced with custom rules.`)": "Notice(`[${config.PLUGIN_NAME}] Inheritance has been removed and replaced with custom rules.`)",
        "Notice(`[${config.PLUGIN_NAME}] Background Check: found missing icons. Adding missing icons...`, 10000)": "Notice(`[${config.PLUGIN_NAME}] Background Check: found missing icons. Adding missing icons...`, 10000)",
        "Notice(`[${config.PLUGIN_NAME}] Background Check: added missing icons`, 10000)": "Notice(`[${config.PLUGIN_NAME}] Background Check: added missing icons`, 10000)",
        "Notice('Icon pack already exists.')": "Notice('Icon pack already exists.')",
        "Notice('Icon pack successfully created.')": "Notice('Icon pack successfully created.')",
        "Notice('Try to fix icon pack...')": "Notice('Try to fix icon pack...')",
        "Notice('...tried to fix icon pack')": "Notice('...tried to fix icon pack')",
        "Notice('Changing icon packs...')": "Notice('Changing icon packs...')",
        "Notice('Done. This change requires a restart of Obsidian')": "Notice('Done. This change requires a restart of Obsidian')",
        "Notice('Icons successfully added.')": "Notice('Icons successfully added.')",
        "Notice('Icon pack successfully deleted.')": "Notice('Icon pack successfully deleted.')",
        "Notice(`File ${file.name} is not a SVG file.`)": "Notice(`File ${file.name} is not a SVG file.`)",
        "Notice('Icon rule added.')": "Notice('Icon rule added.')",
        "Notice('Custom rule updated.')": "Notice('Custom rule updated.')",
        "Notice('Custom rule deleted.')": "Notice('Custom rule deleted.')",
        "Notice('Saving in progress...')": "Notice('Saving in progress...')",
        "Notice('...saved successfully')": "Notice('...saved successfully')",
        "Notice('You need to reload Obsidian for this to take effect.', 10000)": "Notice('You need to reload Obsidian for this to take effect.', 10000)",
        "Notice(`Adding ${item.displayName}...`)": "Notice(`Adding ${item.displayName}...`)",
        "Notice(`...${item.displayName} added`)": "Notice(`...${item.displayName} added`)",
        "Notice(`[${config.PLUGIN_NAME}] Please enable \"Use icon in frontmatter\".`)": "Notice(`[${config.PLUGIN_NAME}] Please enable \"Use icon in frontmatter\".`)",
        "Notice(`[${config.PLUGIN_NAME}] Refreshing icons from frontmatter, please wait...`)": "Notice(`[${config.PLUGIN_NAME}] Refreshing icons from frontmatter, please wait...`)",
        "Notice(`[${config.PLUGIN_NAME}]\\n${message}`)": "Notice(`[${config.PLUGIN_NAME}]\\n${message}`)",
        "Notice(`[${config.PLUGIN_NAME}] Refreshed icons from frontmatter. Please restart Obsidian to see the changes.`)": "Notice(`[${config.PLUGIN_NAME}] Refreshed icons from frontmatter. Please restart Obsidian to see the changes.`)",
        "Notice(`[${config.PLUGIN_NAME}] Obsidian has to be restarted for this change to take effect.`)": "Notice(`[${config.PLUGIN_NAME}] Obsidian has to be restarted for this change to take effect.`)",
        "Notice('Color of icon changed.')": "Notice('Color of icon changed.')",
        "Notice(`[${config.PLUGIN_NAME}] Frontmatter property type \\`icon\\` has to be of type \\`text\\`.`)": "Notice(`[${config.PLUGIN_NAME}] Frontmatter property type \\`icon\\` has to be of type \\`text\\`.`)",
        "Notice(`[${config.PLUGIN_NAME}] Frontmatter property type \\`iconColor\\` has to be of type \\`text\\`.`)": "Notice(`[${config.PLUGIN_NAME}] Frontmatter property type \\`iconColor\\` has to be of type \\`text\\`.`)",
        "Notice(e.message)": "Notice(e.message)",
        " log(message, prefix, ...optionalParams)": " log(message, prefix, ...optionalParams)",
        ".log(...this.formatMessage('log', message, prefix, optionalParams)": ".log(...this.formatMessage('log', message, prefix, optionalParams)",
        ".log('`leaf` in outline is undefined', LoggerPrefix.Outline)": ".log('`leaf` in outline is undefined', LoggerPrefix.Outline)",
        ".log('`leaf` length in outline is 0', LoggerPrefix.Outline)": ".log('`leaf` length in outline is 0', LoggerPrefix.Outline)",
        ".log(`loading ${config.PLUGIN_NAME}`)": ".log(`loading ${config.PLUGIN_NAME}`)",
        ".log('unloading obsidian-icon-folder')": ".log('unloading obsidian-icon-folder')",
        ".error(e)": ".error(e)",
        ".error(this.generatedError)": ".error(this.generatedError)",
        " error(message, prefix, ...optionalParams)": " error(message, prefix, ...optionalParams)",
        ".error(...this.formatMessage('error', message, prefix, optionalParams)": ".error(...this.formatMessage('error', message, prefix, optionalParams)",
        "nerror(){if(this.parentNode)": "nerror(){if(this.parentNode)",
        ".error(`Icon file with name ${iconNameWithPrefix} could not be found`)": ".error(`Icon file with name ${iconNameWithPrefix} could not be found`)",
        ".error(`Icon SVG with name ${iconNameWithPrefix} could not be found`)": ".error(`Icon SVG with name ${iconNameWithPrefix} could not be found`)",
        "name: 'font-awesome-brands'": "name: 'font-awesome-brands'",
        "name: 'font-awesome-regular'": "name: 'font-awesome-regular'",
        "name: 'font-awesome-solid'": "name: 'font-awesome-solid'",
        "name: 'remix-icons'": "name: 'remix-icons'",
        "name: 'icon-brew'": "name: 'icon-brew'",
        "name: 'simple-icons'": "name: 'simple-icons'",
        "name: 'lucide-icons'": "name: 'lucide-icons'",
        "name: 'tabler-icons'": "name: 'tabler-icons'",
        "name: 'boxicons'": "name: 'boxicons'",
        "name: 'rpg-awesome'": "name: 'rpg-awesome'",
        "name: 'coolicons'": "name: 'coolicons'",
        "name: 'feather-icons'": "name: 'feather-icons'",
        "name: 'octicons'": "name: 'octicons'",
        "name: 'Set icon for file'": "name: 'Set icon for file'",
        "text: 'Include folders and files that are part of the path.'": "text: 'Include folders and files that are part of the path.'",
        "text: 'Where the custom rule gets applied to.'": "text: 'Where the custom rule gets applied to.'",
        "text: 'General'": "text: 'General'",
        "text: 'Visibility of icons'": "text: 'Visibility of icons'",
        "text: 'Icon customization for files/folders'": "text: 'Icon customization for files/folders'",
        "text: 'Custom icon rules'": "text: 'Custom icon rules'",
        "text: 'Icon packs'": "text: 'Icon packs'",
        "text: 'Select a color for this icon'": "text: 'Select a color for this icon'",
        ".setText('Edit custom rule')": ".setText('Edit custom rule')",
        ".setText('Change color')": ".setText('Change color')",
        ".setButtonText('Add icon pack')": ".setButtonText('Add icon pack')",
        ".setButtonText('Choose icon')": ".setButtonText('Choose icon')",
        ".setButtonText('Change icon')": ".setButtonText('Change icon')",
        ".setButtonText('Default')": ".setButtonText('Default')",
        ".setButtonText('Save Changes')": ".setButtonText('Save Changes')",
        ".setButtonText('Save')": ".setButtonText('Save')",
        ".setButtonText('Browse icon packs')": ".setButtonText('Browse icon packs')",
        ".setButtonText('Refresh')": ".setButtonText('Refresh')",
        ".setButtonText('Reset')": ".setButtonText('Reset')",
        ".setName('Add custom icon pack')": ".setName('Add custom icon pack')",
        ".setName(`${iconPack.name} (${iconPack.prefix})`)": ".setName(`${iconPack.name} (${iconPack.prefix})`)",
        ".setName('Add icon rule')": ".setName('Add icon rule')",
        ".setName('Emoji style')": ".setName('Emoji style')",
        ".setName('Extra margin (in pixels)')": ".setName('Extra margin (in pixels)')",
        ".setName('Icon color')": ".setName('Icon color')",
        ".setName('Icon font size (in pixels)')": ".setName('Icon font size (in pixels)')",
        ".setName('Icon packs folder path')": ".setName('Icon packs folder path')",
        ".setName('Icons background check')": ".setName('Icons background check')",
        ".setName('Add predefined icon pack')": ".setName('Add predefined icon pack')",
        ".setName('Recently used icons limit')": ".setName('Recently used icons limit')",
        ".setName('Toggle icon in tabs')": ".setName('Toggle icon in tabs')",
        ".setName('Toggle icon in title')": ".setName('Toggle icon in title')",
        ".setName('Use icon in frontmatter')": ".setName('Use icon in frontmatter')",
        ".setName('Frontmatter icon field name')": ".setName('Frontmatter icon field name')",
        ".setName('Frontmatter icon color field name')": ".setName('Frontmatter icon color field name')",
        ".setName('Refresh icons from frontmatter')": ".setName('Refresh icons from frontmatter')",
        ".setName('Toggle icons while editing notes')": ".setName('Toggle icons while editing notes')",
        ".setName('Toggle icons in links')": ".setName('Toggle icons in links')",
        ".setName('Icon identifier')": ".setName('Icon identifier')",
        ".setName('Toggle Debug Mode')": ".setName('Toggle Debug Mode')",
        ".setName('EXPERIMENTAL: Use internal plugins')": ".setName('EXPERIMENTAL: Use internal plugins')",
        ".setDesc('Add a custom icon pack.')": ".setDesc('Add a custom icon pack.')",
        ".setDesc(`Total icons: ${iconPack.icons.length}${isLucideIconPack ? ` ${additionalLucideDescription}` : ''}`)": ".setDesc(`Total icons: ${iconPack.icons.length}${isLucideIconPack ? ` ${additionalLucideDescription}` : ''}`)",
        ".setDesc(`Total icons: ${iconPack.icons.length} (added: ${file.name})`)": ".setDesc(`Total icons: ${iconPack.icons.length} (added: ${file.name})`)",
        ".setDesc('Will add the icon based on the defined rule (as a plain string or in regex format).')": ".setDesc('Will add the icon based on the defined rule (as a plain string or in regex format).')",
        ".setDesc(`Icon: ${rule.icon}`)": ".setDesc(`Icon: ${rule.icon}`)",
        ".setDesc('Change the style of your emojis.')": ".setDesc('Change the style of your emojis.')",
        ".setDesc('Change the margin of the icons.')": ".setDesc('Change the margin of the icons.')",
        ".setDesc('Change the color of the displayed icons.')": ".setDesc('Change the color of the displayed icons.')",
        ".setDesc('Change the font size of the displayed icons.')": ".setDesc('Change the font size of the displayed icons.')",
        ".setDesc('Change the default icon packs folder path.')": ".setDesc('Change the default icon packs folder path.')",
        ".setDesc('Check in the background on every load of Obsidian, if icons are missing and it will try to add them to the specific icon pack.')": ".setDesc('Check in the background on every load of Obsidian, if icons are missing and it will try to add them to the specific icon pack.')",
        ".setDesc('Add a predefined icon pack that is officially supported.')": ".setDesc('Add a predefined icon pack that is officially supported.')",
        ".setDesc('Change the limit for the recently used icons displayed in the icon selection modal.')": ".setDesc('Change the limit for the recently used icons displayed in the icon selection modal.')",
        ".setDesc('Toggles the visibility of an icon for a file in the tab bar.')": ".setDesc('Toggles the visibility of an icon for a file in the tab bar.')",
        ".setDesc('Toggles the visibility of an icon above the title of a file.')": ".setDesc('Toggles the visibility of an icon above the title of a file.')",
        ".setDesc('Toggles whether to set the icon based on the frontmatter property `icon`.')": ".setDesc('Toggles whether to set the icon based on the frontmatter property `icon`.')",
        ".setDesc('Sets the name of the frontmatter field which contains the icon.')": ".setDesc('Sets the name of the frontmatter field which contains the icon.')",
        ".setDesc('Sets the name of the frontmatter field which contains the icon color.')": ".setDesc('Sets the name of the frontmatter field which contains the icon color.')",
        ".setDesc('Toggles whether you are able to add and see icons in your notes and editor (e.g., ability to have :LiSofa: as an icon in your notes).')": ".setDesc('Toggles whether you are able to add and see icons in your notes and editor (e.g., ability to have :LiSofa: as an icon in your notes).')",
        ".setDesc('Toggles whether you are able to see icons in the links to other notes')": ".setDesc('Toggles whether you are able to see icons in the links to other notes')",
        ".setDesc('Change the icon identifier used in notes.')": ".setDesc('Change the icon identifier used in notes.')",
        ".setDesc('Toggle debug mode to see more detailed logs in the console. Do not touch this unless you know what you are doing.')": ".setDesc('Toggle debug mode to see more detailed logs in the console. Do not touch this unless you know what you are doing.')",
        ".setDesc('Toggles whether to try to add icons to the bookmark and outline internal plugins.')": ".setDesc('Toggles whether to try to add icons to the bookmark and outline internal plugins.')",
        ".setPlaceholder('Your icon pack name')": ".setPlaceholder('Your icon pack name')",
        ".setPlaceholder('regex or simple string')": ".setPlaceholder('regex or simple string')",
        ".setTooltip('Try to fix icon pack')": ".setTooltip('Try to fix icon pack')",
        ".setTooltip('Add an icon')": ".setTooltip('Add an icon')",
        ".setTooltip('Remove the icon pack')": ".setTooltip('Remove the icon pack')",
        ".setTooltip('Prioritize the custom rule')": ".setTooltip('Prioritize the custom rule')",
        ".setTooltip('Deprioritize the custom rule')": ".setTooltip('Deprioritize the custom rule')",
        ".setTooltip('Edit the custom rule')": ".setTooltip('Edit the custom rule')",
        ".setTooltip(`Icon applicable to: ${isFor}`)": ".setTooltip(`Icon applicable to: ${isFor}`)",
        ".setTooltip('Set color to the default one')": ".setTooltip('Set color to the default one')",
        ".setTooltip('Remove the custom rule')": ".setTooltip('Remove the custom rule')",
        ".setTooltip('Restore default')": ".setTooltip('Restore default')",
        ".setTitle('Change icon')": ".setTitle('Change icon')",
        ".setTitle('Remove icon')": ".setTitle('Remove icon')",
        ".setTitle('Change color of icon')": ".setTitle('Change color of icon')",
        ".innerText = 'Recently used Icons:'": ".innerText = 'Recently used Icons:'",
        ".innerText = 'All Icons:'": ".innerText = 'All Icons:'"
    }
}
